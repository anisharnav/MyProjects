pipeline {
    agent {
        docker {
            image 'docker:latest'
            args '-v /var/run/docker.sock:/var/run/docker.sock' // For Docker-in-Docker
        }
    }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('26c48caa-4b98-4d76-b592-fa0ff0963a92') // Jenkins credential ID
        DOCKERHUB_REPO = 'anisharnav/docker-images'
        IMAGE_NAME = "${DOCKERHUB_REPO}:${env.BUILD_NUMBER}"
    }
    stages {
        stage('Checkout Code') {
            steps {
                // Checkout the source code from the repository
              sh  'git clone https://github.com/anisharnav/MyProjects.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                    docker build -t $IMAGE_NAME .
                    '''
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                script {
                    sh '''
                    echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                    '''
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    sh '''
                    docker push $IMAGE_NAME
                    '''
                }
            }
        }
        stage('Pull Docker Image') {
            steps {
                script {
                  sh '''
                    docker pull $IMAGE_NAME
                    '''
                }
            }
        }
        stage('Run Docker Container') {
            steps {
                script {
                    sh '''
                    docker run -d -p 8081:80 --name my-app-container $IMAGE_NAME
                    '''
                }
            }
        }
    }
    post {
        always {
            // Cleanup after the job
            script {
                sh '''
                docker rm -f my-app-container || true
                docker rmi $IMAGE_NAME || true
                '''
            }
        }
    }
}

